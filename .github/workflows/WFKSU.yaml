name: Build Android Kernel (WILDFlower GKI + KernelSU & SUSFS)

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      os_patch_level:
        description: 'OS Patch Level (e.g. 2025-05)'
        required: true
        default: '2025-05'
      sub_level:
        description: 'Kernel Sub Level (e.g. 180 or X for LTS auto)'
        required: true
        default: 'X'
      revision:
        description: 'Optional revision string used for some GKI URLs'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    strategy:
      matrix:
        build_type: [normal, make]

    env:
      ANDROID_VERSION: "android13"
      KERNEL_VERSION: "5.15"
      REPO_URL: "https://github.com/mizdrake7/WILDFlower-android13-5.15-common-GKI.git"
      REPO_BRANCH: "android13-5.15"
      ANYKERNEL_BRANCH: "gki-2.0"
      KERNEL_GIT_NAME: "WILDFlower-android13-5.15-common-GKI"
      CROSS_COMPILE: "aarch64-linux-android-"

    steps:
      - name: Checkout repo (build scripts / patches)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set CONFIG Environment Variable
        id: set_config
        run: |
          CONFIG="${ANDROID_VERSION}-${KERNEL_VERSION}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG=$CONFIG"

      - name: Install base packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            libelf-dev libssl-dev build-essential bc bison flex unzip ccache curl lz4 \
            python3 python3-pip git pkg-config zlib1g-dev llvm clang protobuf-compiler \
            openjdk-11-jdk ninja-build

      - name: Prepare repo tool and build tools
        run: |
          mkdir -p ./git-repo
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo -o ./git-repo/repo
          chmod +x ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/git-repo/repo" >> $GITHUB_ENV

          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025 || true
          git clone --depth 1 "$AOSP_MIRROR/kernel/prebuilts/build-tools" -b "$BRANCH" kernel-build-tools || true
          git clone --depth 1 "$AOSP_MIRROR/platform/system/tools/mkbootimg" -b "$BRANCH" mkbootimg || true

          if [ -d "$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin" ]; then
            echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
            echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV
          fi
          if [ -f "$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" ]; then
            echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
            echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          fi
          if [ -d "$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb" ]; then
            echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          fi

      - name: Set boot sign key (from secret if provided)
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ -n "$BOOT_SIGN_KEY" ]; then
            mkdir -p "$(dirname "$BOOT_SIGN_KEY_PATH")" || true
            echo "$BOOT_SIGN_KEY" > "${BOOT_SIGN_KEY_PATH:-./testkey_rsa2048.pem}"
            chmod 600 "${BOOT_SIGN_KEY_PATH:-./testkey_rsa2048.pem}"
          fi

      - name: Clone AnyKernel3 and other deps
        run: |
          git clone https://github.com/WildKernels/AnyKernel3.git -b ${ANYKERNEL_BRANCH} --depth 1 || true
          git clone https://gitlab.com/simonpunk/susfs4ksu.git --depth 1 || true
          git clone https://github.com/WildKernels/kernel_patches.git --depth 1 || true

      - name: Initialize and Sync Kernel Source (repo)
        run: |
          set -e
          CONFIG_DIR="$CONFIG"
          mkdir -p "$CONFIG_DIR"
          cd "$CONFIG_DIR"

          FORMATTED_BRANCH="${ANDROID_VERSION}-${KERNEL_VERSION}-${{ inputs.os_patch_level }}"
          REPO_BIN="${REPO:-$GITHUB_WORKSPACE/git-repo/repo}"
          if [ ! -x "$REPO_BIN" ]; then
            chmod +x "$REPO_BIN" || true
          fi

          if [ -x "$REPO_BIN" ]; then
            "$REPO_BIN" init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-"$FORMATTED_BRANCH" --repo-rev=v2.16 || true
            "$REPO_BIN" sync -c -j$(nproc) --no-tags --fail-fast || true
          else
            cd ..
            git clone --depth 1 -b ${REPO_BRANCH} ${REPO_URL} kernel || true
            cd "$CONFIG_DIR"
          fi

      - name: Extract Actual Sublevel (if X)
        if: ${{ inputs.sub_level == 'X' }}
        run: |
          set -e || true
          cd "$CONFIG"
          if [ -f "common/Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL\s*[:=]\s*' common/Makefile | head -n1 | awk -F'[:=]' '{print $2}' | xargs || true)
            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              NEW_CONFIG="${ANDROID_VERSION}-${KERNEL_VERSION}-$ACTUAL_SUBLEVEL"
              echo "CONFIG=$NEW_CONFIG" >> $GITHUB_ENV
              cd ..
              if [ -d "$CONFIG" ] && [ ! -d "$NEW_CONFIG" ]; then
                mv "$CONFIG" "$NEW_CONFIG" || true
              fi
            fi
          fi

      - name: Apply ptrace patch for 5.15
        run: |
          cd "$CONFIG" || true
          if [ -f "../kernel_patches/gki_ptrace.patch" ]; then
            patch -p1 -F 3 < "../kernel_patches/gki_ptrace.patch" || true
          fi

      - name: Add KernelSU
        run: |
          cd "$CONFIG" || true
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild || true

      - name: Apply SUSFS patches
        run: |
          set -e || true
          cd "$CONFIG" || true
          if [ -d "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches" ]; then
            cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch" ./common/ 2>/dev/null || true
            cd common || true
            patch -p1 --forward < 50_add_susfs_in_gki-${ANDROID_VERSION}-${KERNEL_VERSION}.patch 2>/dev/null || true
            cd ..
            cp -r "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/" ./common/fs/ 2>/dev/null || true
            cp -r "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/" ./common/include/linux/ 2>/dev/null || true
          fi

      - name: Apply Hooks and Hide Stuff patches
        run: |
          cd "$CONFIG/common" || true
          if [ -f "$GITHUB_WORKSPACE/kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch" ]; then
            cp "$GITHUB_WORKSPACE/kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch" .
            patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch || true
          fi
          if [ -f "$GITHUB_WORKSPACE/kernel_patches/69_hide_stuff.patch" ]; then
            cp "$GITHUB_WORKSPACE/kernel_patches/69_hide_stuff.patch" .
            patch -p1 --forward -F 3 < 69_hide_stuff.patch || true
          fi

      - name: Apply Module Symbol Version Fix
        run: |
          cd "$CONFIG" || true
          if [ -d "./common/kernel/module" ]; then
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' ./common/kernel/module/version.c 2>/dev/null || true
          else
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' ./common/kernel/module.c 2>/dev/null || true
          fi

      - name: Apply Kernel Configuration
        run: |
          set -e || true
          defconfig="./common/arch/arm64/configs/gki_defconfig"
          if [ -f "$defconfig" ]; then
            grep -qxF "CONFIG_KSU=y" "$defconfig" || echo "CONFIG_KSU=y" >> "$defconfig"
            grep -qxF "CONFIG_KSU_KPROBES_HOOK=n" "$defconfig" || echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"
          fi

      - name: Build kernel (make flow)
        if: ${{ matrix.build_type == 'make' }}
        run: |
          set -e
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          cd "$KERNEL_PATH/common" || exit 1
          make -j$(nproc --all) O=out LLVM=1 ARCH=arm64 CROSS_COMPILE=${CROSS_COMPILE} gki_defconfig
          make -j$(nproc --all) O=out LLVM=1 ARCH=arm64 CROSS_COMPILE=${CROSS_COMPILE}

      - name: Build kernel (legacy flow)
        if: ${{ matrix.build_type == 'normal' }}
        run: |
          set -e
          cd "$GITHUB_WORKSPACE/$CONFIG/kernel" || exit 1
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=${CROSS_COMPILE}
          export CC=clang
          export LLVM=1
          make -j$(nproc) gki_defconfig
          make -j$(nproc)

      - name: Create Kernel ZIP
        run: |
          set -e
          IMAGE_SRC="$CONFIG/common/out/arch/arm64/boot/Image"
          cp "$IMAGE_SRC" AnyKernel3/Image || true
          SUBLEVEL_FOR_NAME="${ACTUAL_SUBLEVEL:-${{ inputs.sub_level }}}"
          ZIP_NAME="WFKSU-${ANDROID_VERSION}-${KERNEL_VERSION}.${SUBLEVEL_FOR_NAME}-${{ inputs.os_patch_level }}-AnyKernel3.zip"
          cd AnyKernel3
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${ANDROID_VERSION}-${KERNEL_VERSION}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.build_type }}
          path: |
            *.zip
            *.img
