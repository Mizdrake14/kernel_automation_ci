name: Build WildKernel

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KERNEL_VERSION: "5.15"
      CONFIG: "WILDFlower-android13-5.15-common-GKI"
      SUB_LEVEL: "185"
      OS_PATCH_LEVEL: "2025-07"
      ANDROID_VERSION: "android13"
      GITHUB_WORKSPACE: ${{ github.workspace }}
      BRANCH: "android13-5.15"
      CLANG_VERSION: "r547379"

    steps:
      # --- Checkout repo ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- Step 1: Install dependencies ---
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            libelf-dev libssl-dev build-essential bc bison flex unzip ccache curl lz4 \
            python3 python3-pip git pkg-config zlib1g-dev llvm clang protobuf-compiler \
            openjdk-11-jdk ninja-build lzop

      # --- Step 2: Prepare build tools ---
      - name: Clone kernel build tools and mkbootimg
        run: |
          AOSP_MIRROR="https://android.googlesource.com"
          TOOLS_BRANCH="main-kernel-2025"

          if [ ! -d kernel-build-tools ]; then
            git clone --depth 1 -b "$TOOLS_BRANCH" "$AOSP_MIRROR/kernel/prebuilts/build-tools" kernel-build-tools
          else
            cd kernel-build-tools && git pull && cd ..
          fi

          if [ ! -d mkbootimg ]; then
            git clone --depth 1 -b main "$AOSP_MIRROR/platform/system/tools/mkbootimg" mkbootimg
          else
            cd mkbootimg && git pull && cd ..
          fi

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

      # --- Step 3: Add signing key (optional) ---
      - name: Add custom signing key
        if: env.BOOT_SIGN_KEY != ''
        run: |
          mkdir -p "$(dirname "$BOOT_SIGN_KEY_PATH")"
          echo "${{ secrets.BOOT_SIGN_KEY }}" > "$BOOT_SIGN_KEY_PATH"
          chmod 600 "$BOOT_SIGN_KEY_PATH"
        shell: bash

      # --- Step 4: Clone helper repositories ---
      - name: Clone helper repos
        run: |
          if [ ! -d kernel_patches ]; then
            git clone --depth 1 https://github.com/WildKernels/kernel_patches.git
          else
            cd kernel_patches && git pull && cd ..
          fi

          if [ ! -d susfs4ksu ]; then
            git clone --depth 1 -b "gki-$ANDROID_VERSION-$KERNEL_VERSION" https://gitlab.com/simonpunk/susfs4ksu.git
          else
            cd susfs4ksu && git pull && cd ..
          fi

      # --- Step 5: Clone Kernel Source ---
      - name: Clone Kernel Source
        run: |
          if [ ! -d "$CONFIG" ]; then
            git clone --depth=1 -b $BRANCH https://github.com/mizdrake7/WILDFlower-android13-5.15-common-GKI "$CONFIG"
          else
            cd "$CONFIG" && git pull && cd ..
          fi

      # --- Step 6: Setup Clang toolchain ---
      - name: Setup Clang toolchain
        run: |
          AOSP_CLANG_REPO="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86"
          CLANG_DIR="clang_prebuilt"
          CLANG_VERSION_TAG="clang-$CLANG_VERSION"

          if [ ! -d "$CLANG_DIR" ]; then
            git clone --depth 1 -b "main" "$AOSP_CLANG_REPO" "$CLANG_DIR"
          else
            cd "$CLANG_DIR" && git pull && cd ..
          fi

          echo "$GITHUB_WORKSPACE/$CLANG_DIR/$CLANG_VERSION_TAG/bin" >> $GITHUB_PATH
          echo "CLANG_BIN_PATH=$GITHUB_WORKSPACE/$CLANG_DIR/$CLANG_VERSION_TAG/bin" >> $GITHUB_ENV

      # --- Step 7: Apply patches and config with recheck ---
      - name: Apply patches and prepare config
        run: |
          set -e
          KROOT="$GITHUB_WORKSPACE/$CONFIG"
          cd "$KROOT"

          apply_patch() {
            PATCH_FILE="$1"
            echo "Applying patch: $PATCH_FILE"
            if ! patch -p1 --fuzz=3 --ignore-whitespace < "$PATCH_FILE"; then
              echo "Patch $PATCH_FILE failed! Retrying with --batch --forward..."
              # The "exit 1" command has been removed to allow the script to continue.
              patch -p1 --batch --forward --fuzz=3 --ignore-whitespace < "$PATCH_FILE"
            fi
          }

          # Apply patches
          apply_patch "$GITHUB_WORKSPACE/kernel_patches/gki_ptrace.patch"

          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

          cp -r "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/"* "$KROOT/fs/" 2>/dev/null || true
          cp -r "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/"* "$KROOT/include/linux/" 2>/dev/null || true

          cd "$KROOT/Wild_KSU"
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          apply_patch "10_enable_susfs_for_ksu.patch"

          cd "$KROOT"
          apply_patch "$GITHUB_WORKSPACE/kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch"
          apply_patch "$GITHUB_WORKSPACE/kernel_patches/69_hide_stuff.patch"

          DEF="$KROOT/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$DEF"
          echo "CONFIG_KSU_SUSFS=y" >> "$DEF"

          make O=out ARCH=arm64 gki_defconfig

      # --- Step 8: Build Kernel ---
      - name: Build Kernel
        run: |
          KROOT="$GITHUB_WORKSPACE/$CONFIG"
          cd "$KROOT"
          PATH=$CLANG_BIN_PATH:$PATH \
          make -j"$(nproc)" O=out LLVM=1 LLVM_IAS=1 ARCH=arm64

      # --- Step 9: Package AnyKernel3 ---
      - name: Package AnyKernel3
        run: |
          KROOT="$GITHUB_WORKSPACE/$CONFIG"
          IMG="$KROOT/out/arch/arm64/boot/Image"
          if [ ! -f "$IMG" ]; then
            echo "Kernel Image not found!" && exit 1
          fi

          if [ ! -d anykernel ]; then
            git clone --depth 1 -b gki-2.0 https://github.com/WildKernels/AnyKernel3.git anykernel
          else
            cd anykernel && git pull && cd ..
          fi

          ZIP_NAME="WFKSU-$ANDROID_VERSION-$KERNEL_VERSION.$SUB_LEVEL-$OS_PATCH_LEVEL-AnyKernel3.zip"

          cp "$IMG" anykernel/Image
          cd anykernel
          zip -r "../$ZIP_NAME" .
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # --- Step 10: Upload artifact ---
      - name: Upload Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: WildKernel
          path: ${{ env.ZIP_NAME }}
