name: Kernel Build

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      os_patch_level:
        description: 'OS Patch Level (e.g., 2025-05)'
        required: true
        default: '2025-05'
      sub_level:
        description: 'Kernel Sub Level (e.g., 180 or X for auto-detect)'
        required: true
        default: 'X'
      revision:
        description: 'Optional revision string (for some GKI URLs)'
        required: false
        default: ''

env:
  ANDROID_VERSION: android13
  KERNEL_VERSION: 5.15
  REPO_URL: https://github.com/mizdrake7/WILDFlower-android13-5.15-common-GKI.git
  REPO_BRANCH: android13-5.15
  ANYKERNEL_BRANCH: gki-2.0
  CROSS_COMPILE: aarch64-linux-android-
  CONFIG_BASE: build

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    strategy:
      matrix:
        build_type: [make, normal]
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive CONFIG directory
        run: |
          CONFIG="${{ env.CONFIG_BASE }}-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG=$CONFIG"

      - name: Install packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            libelf-dev libssl-dev build-essential bc bison flex unzip ccache curl lz4 \
            python3 python3-pip git pkg-config zlib1g-dev llvm clang protobuf-compiler \
            openjdk-11-jdk ninja-build

      - name: Prepare repo + build tools
        run: |
          mkdir -p git-repo
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo -o git-repo/repo
          chmod +x git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/git-repo/repo" >> $GITHUB_ENV
          
          AOSP_MIRROR=https://android.googlesource.com
          TOOLS_BRANCH=main-kernel-2025
          set -e
          git clone --depth 1 -b "$TOOLS_BRANCH" "$AOSP_MIRROR/kernel/prebuilts/build-tools" kernel-build-tools
          git clone --depth 1 -b "$TOOLS_BRANCH" "$AOSP_MIRROR/platform/system/tools/mkbootimg" mkbootimg
          
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin" >> $GITHUB_PATH

      - name: Inject custom boot sign key (if secret present)
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ -n "$BOOT_SIGN_KEY" ]; then
            KEY_PATH="${BOOT_SIGN_KEY_PATH:-$GITHUB_WORKSPACE/testkey_rsa2048.pem}"
            echo "$BOOT_SIGN_KEY" > "$KEY_PATH"
            chmod 600 "$KEY_PATH"
            echo "Using provided signing key at $KEY_PATH"
          else
            echo "Using default test key (no secret supplied)."
          fi

      - name: Fetch Kernel Source (manifest first, git fallback)
        id: fetch_source
        run: |
          set -e
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          FORMATTED_BRANCH="common-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}-${{ inputs.os_patch_level }}"
          echo "Attempting repo manifest branch: $FORMATTED_BRANCH"
          
          if "$REPO" init --depth=1 -u https://android.googlesource.com/kernel/manifest -b "$FORMATTED_BRANCH" --repo-rev=v2.16; then
            "$REPO" sync -c -j$(nproc) --no-tags --fail-fast
            echo "LAYOUT=manifest" >> $GITHUB_ENV
          else
            echo "Manifest init failed; falling back to single git clone."
            git clone --depth 1 -b "${{ env.REPO_BRANCH }}" "${{ env.REPO_URL }}" kernel
            echo "LAYOUT=single" >> $GITHUB_ENV
          fi
          
          cd "$GITHUB_WORKSPACE"
          echo "Source layout: $(cat $GITHUB_ENV | grep LAYOUT)"

      - name: Verify Source Layout
        run: |
          set -e
          if [ "${LAYOUT}" = "manifest" ] && [ ! -d "${CONFIG}/common" ]; then
            echo "Expected ${CONFIG}/common directory but not found."
            find "${CONFIG}" -maxdepth 3 -type d
            exit 1
          fi
          if [ "${LAYOUT}" = "single" ] && [ ! -d "${CONFIG}/kernel" ]; then
            echo "Expected ${CONFIG}/kernel directory but not found."
            find "${CONFIG}" -maxdepth 3 -type d
            exit 1
          fi

      - name: Extract Actual Sublevel (if requested)
        if: ${{ inputs.sub_level == 'X' }}
        run: |
          set -e
          # Choose correct Makefile path
          if [ "${LAYOUT}" = "manifest" ]; then
            MF="${CONFIG}/common/Makefile"
          else
            MF="${CONFIG}/kernel/Makefile"
          fi
          if [ -f "$MF" ]; then
            ACTUAL_SUBLEVEL=$(grep -E '^SUBLEVEL[[:space:]:=]+' "$MF" | head -n1 | awk -F'[ :=]' '{print $2}')
            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              NEW_CONFIG="build-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}-${ACTUAL_SUBLEVEL}"
              if [ "$NEW_CONFIG" != "$CONFIG" ]; then
                mv "$CONFIG" "$NEW_CONFIG"
                echo "CONFIG=$NEW_CONFIG" >> $GITHUB_ENV
                echo "Renamed build directory to $NEW_CONFIG"
              fi
            fi
          else
            echo "Makefile not found at $MF; cannot extract sublevel."
          fi

      - name: Show directory tree (debug)
        run: |
          echo "CONFIG=$CONFIG LAYOUT=$LAYOUT"
          find "$CONFIG" -maxdepth 3 -type f -name Makefile | sed 's|^|FOUND: |'
          du -sh "$CONFIG"/* || true

      - name: Apply ptrace patch (5.15)
        run: |
          set -e
          TARGET_ROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          if [ -f "kernel_patches/gki_ptrace.patch" ]; then
            echo "Applying ptrace patch"
            (cd "$TARGET_ROOT" && patch -p1 -F 3 < "$GITHUB_WORKSPACE/kernel_patches/gki_ptrace.patch")
          else
            echo "ptrace patch not found; skipping."
          fi

      - name: Add KernelSU
        run: |
          set -e
          cd "$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild

      - name: Apply SUSFS patches
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          if [ -d susfs4ksu/kernel_patches ]; then
            PATCH="susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch"
            if [ -f "$PATCH" ]; then
              cp "$PATCH" "$KROOT/"
              (cd "$KROOT" && patch -p1 --forward < "$(basename "$PATCH")")
            else
              echo "SUSFS base patch not found for version; skipping main patch."
            fi
            # File additions
            cp -r susfs4ksu/kernel_patches/fs/* "$KROOT/fs/" 2>/dev/null || true
            cp -r susfs4ksu/kernel_patches/include/linux/* "$KROOT/include/linux/" 2>/dev/null || true
          else
            echo "No SUSFS patches directory."
          fi

      - name: Apply Hooks / Hide patches
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          if [ -f kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ]; then
            (cd "$KROOT" && patch -p1 --forward -F 3 < "$GITHUB_WORKSPACE/kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch" || true)
          fi
          if [ -f kernel_patches/69_hide_stuff.patch ]; then
            (cd "$KROOT" && patch -p1 --forward -F 3 < "$GITHUB_WORKSPACE/kernel_patches/69_hide_stuff.patch" || true)
          fi

      - name: Fix Module Symbol Version check
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          FILE1="$KROOT/kernel/module/version.c"
          FILE2="$KROOT/kernel/module.c"
          TARGET=""
          [ -f "$FILE1" ] && TARGET="$FILE1"
          # fallback
          [ -z "$TARGET" ] && [ -f "$FILE2" ] && TARGET="$FILE2"
          if [ -n "$TARGET" ]; then
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' "$TARGET"
            echo "Patched $TARGET"
          else
            echo "Module version file not found; skipping."
          fi

      - name: Ensure Kernel Config flags
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          DEF="$KROOT/arch/arm64/configs/gki_defconfig"
          if [ -f "$DEF" ]; then
            grep -q '^CONFIG_KSU=y' "$DEF" || echo 'CONFIG_KSU=y' >> "$DEF"
            grep -q '^CONFIG_KSU_KPROBES_HOOK=n' "$DEF" || echo 'CONFIG_KSU_KPROBES_HOOK=n' >> "$DEF"
          else
            echo "gki_defconfig not found at $DEF" && exit 1
          fi

      - name: Build (make flow)
        if: ${{ matrix.build_type == 'make' }}
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          cd "$KROOT"
          make -j$(nproc) O=out LLVM=1 ARCH=arm64 CROSS_COMPILE=${{ env.CROSS_COMPILE }} gki_defconfig
          make -j$(nproc) O=out LLVM=1 ARCH=arm64 CROSS_COMPILE=${{ env.CROSS_COMPILE }}

      - name: Build (legacy fallback flow)
        if: ${{ matrix.build_type == 'normal' }}
        run: |
          set -e
          # For single-clone layout build inside kernel/ ; for manifest we can still reuse common/
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          cd "$KROOT"
          export ARCH=arm64 SUBARCH=arm64 CROSS_COMPILE=${{ env.CROSS_COMPILE }} LLVM=1 CC=clang
          make -j$(nproc) gki_defconfig
          make -j$(nproc)

      - name: Collect Image and Create AnyKernel zip
        run: |
          set -e
          KROOT="$CONFIG/$( [ "$LAYOUT" = manifest ] && echo common || echo kernel )"
          IMG_PATH="$KROOT/out/arch/arm64/boot/Image"
          if [ ! -f "$IMG_PATH" ]; then
            echo "Kernel Image not found at $IMG_PATH"
            find "$KROOT/out" -maxdepth 4 -type f | head
            exit 1
          fi
          git clone --depth 1 -b ${{ env.ANYKERNEL_BRANCH }} https://github.com/WildKernels/AnyKernel3.git anykernel
          cp "$IMG_PATH" anykernel/Image
          SUBLEVEL="${ACTUAL_SUBLEVEL:-${{ inputs.sub_level }}}"
          ZIP_NAME="WFKSU-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.${SUBLEVEL}-${{ inputs.os_patch_level }}-${{ matrix.build_type }}-AnyKernel3.zip"
          (cd anykernel && zip -r "../$ZIP_NAME" .)
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.build_type }}
          path: |
            *.zip
